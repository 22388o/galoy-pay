{"version":3,"sources":["config.ts","components/home.tsx","components/downloadApp.tsx","components/invoice.tsx","components/generate-invoice.tsx","helpers/use-sat-price.tsx","components/formatted-input.tsx","components/receiveAmount.tsx","components/receiveNoAmount.tsx","helpers/update-history-state.ts","components/receive.tsx","components/printQR.tsx","components/header.tsx","App.tsx","index.tsx"],"names":["GRAPHQL_URI","process","GRAPHQL_SUBSCRIPTION_URI","GET_NODE_STATS","gql","Home","nodeUrl","indexOf","useQuery","loading","error","data","Container","Row","Col","Jumbotron","Card","Body","ListGroup","variant","Item","style","fontSize","overflowWrap","globals","nodesIds","href","getOS","userAgent","navigator","vendor","window","opera","test","MSStream","playStoreLink","appStoreLink","apkLink","DownloadApp","os","location","replace","Image","src","rounded","width","Button","block","value","size","LN_INVOICE_PAYMENT_STATUS","Invoice","paymentRequest","useState","showCopied","setShowCopied","useSubscription","variables","input","console","className","message","OverlayTrigger","show","placement","overlay","Tooltip","id","onClick","copy","setTimeout","logoImage","logoWidth","mutationData","errors","status","length","options","animationData","loop","height","LN_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT","GenerateInvoice","amountInSats","userWalletId","regenerateAction","React","invoiceStatus","setInvoiceStatus","useMutation","onError","onCompleted","createInvoice","walletId","amount","invoiceNeedUpdateTimer","invoiceExpiredTimer","clearTimeout","invoiceData","map","e","join","invoice","QUERY_PRICE","useSatPrice","priceRef","amountCurrencyUnit","priceCurrencyUnit","conversions","satsToUsd","sats","current","usdToSats","usd","price","base","offset","NaN","formatter","Intl","NumberFormat","maximumFractionDigits","parseInputValue","inputValue","numberValue","Number","inputValueIncomplete","match","formattedValue","isNaN","format","FormattedInput","onValueChange","setInput","onChange","target","parsedInputValue","usdFormatter","currency","satsFormatter","ReceiveAmount","updateURLAmount","satsForInvoice","setSatsForInvoice","urlSearchParams","URLSearchParams","search","queryObject","toUpperCase","parseQueryAmount","Object","fromEntries","entries","primaryAmount","setPrimaryAmount","primaryValue","primaryCurrency","convertValue","newValue","convertedValue","setConvertedValue","onAmountUpdateDebounced","debounce","Math","round","onFormattedInputValueChange","currentAmount","updateSatsAmount","toString","newPrimaryNumber","toFixed","LN_NOAMOUNT_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT","ReceiveNoAmount","onSetAmountClick","useEffect","objectToQueryString","inObj","qs","forEach","key","undefined","append","updateHistoryState","Error","history","replaceState","pathname","USER_WALLET_ID","Receive","username","useQueryParams","queryParams","setQueryParams","userDefaultWalletId","isAmountInvoice","fluid","md","padding","Header","Footer","Link","origin","QRContainer","forwardRef","props","ref","display","Text","ecLevel","PrintQR","componentRef","useRef","trigger","content","onBeforeGetContent","qrcodeLogo","document","getElementById","Navbar","bg","Brand","routes","App","routeResult","useRoutes","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider"],"mappings":"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","file":"static/js/main.bb888da2.chunk.js","sourcesContent":["export const GRAPHQL_URI = process.env.GRAPHQL_URI as string\n\nexport const GRAPHQL_SUBSCRIPTION_URI = process.env.GRAPHQL_SUBSCRIPTION_URI as string\n\nif (!GRAPHQL_URI || !GRAPHQL_SUBSCRIPTION_URI) {\n  throw new Error(\"Missing env variables\")\n}\n","import Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\nimport { gql, useQuery } from \"@apollo/client\"\n\nimport { GRAPHQL_URI } from \"../config\"\n\nconst GET_NODE_STATS = gql`\n  query nodeIds {\n    globals {\n      nodesIds\n    }\n  }\n`\n\nfunction Home() {\n  const nodeUrl =\n    GRAPHQL_URI.indexOf(\"testnet\") === -1\n      ? `https://1ml.com/node/`\n      : `https://1ml.com/testnet/node/`\n\n  const { loading, error, data } = useQuery(GET_NODE_STATS)\n\n  return (\n    <Container>\n      <br />\n      <Row>\n        <Col>\n          <h2>Connect to the Bitcoin Beach Lightning Node</h2>\n          <br />\n          <Jumbotron>\n            <Container>\n              <Row>\n                <Col>\n                  <Card>\n                    <Card.Body>\n                      <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                          <label>Node Public Key: </label>{\" \"}\n                          <p style={{ fontSize: \"small\", overflowWrap: \"break-word\" }}>\n                            {error\n                              ? \"Unavailable\"\n                              : loading\n                              ? \"Loading...\"\n                              : data.globals.nodesIds[0]}\n                          </p>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                          {error ? (\n                            \"Unavailable\"\n                          ) : loading ? (\n                            \"Loading...\"\n                          ) : (\n                            <a href={nodeUrl + `${data.globals.nodesIds[0]}`}>\n                              Connect the Bitcoin Beach Lightning node\n                            </a>\n                          )}\n                        </ListGroup.Item>\n                      </ListGroup>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              </Row>\n              <hr />\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Home\n","import { QRCode } from \"react-qrcode-logo\"\nimport Image from \"react-bootstrap/Image\"\nimport Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nexport const getOS = () => {\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera\n\n  // Windows Phone must come first because its UA also contains \"Android\"\n  if (/windows phone/i.test(userAgent)) {\n    return undefined\n  }\n\n  if (/android/i.test(userAgent)) {\n    return \"android\"\n  }\n\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\n  if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n    return \"ios\"\n  }\n\n  return undefined\n}\n\nexport const playStoreLink = \"https://play.google.com/store/apps/details?id=com.galoyapp\"\nexport const appStoreLink = \"https://apps.apple.com/app/bitcoin-beach-wallet/id1531383905\"\nexport const apkLink = \"https://storage.googleapis.com/bitcoin-beach-wallet/latest.apk\"\n\nconst DownloadApp = () => {\n  const os = getOS()\n\n  if (os === \"android\") {\n    window.location.replace(\"https://play.google.com/store/apps/details?id=com.galoyapp\")\n  } else if (os === \"ios\") {\n    window.location.replace(\n      \"itms-apps://itunes.apple.com/app/bitcoin-beach-wallet/id1531383905\",\n    )\n  }\n\n  return (\n    <Container>\n      <br />\n      <h3>Download the Bitcoin Beach Wallet</h3>\n      <br />\n      <Row>\n        <Col>\n          <a href={appStoreLink}>\n            <Image src={process.env.PUBLIC_URL + \"/apple-app-store.png\"} rounded />\n          </a>\n          <br />\n          <br />\n        </Col>\n        <Col>\n          <a href={playStoreLink}>\n            <Image src={process.env.PUBLIC_URL + \"/google-play-badge.png\"} rounded />\n          </a>\n        </Col>\n        <Col>\n          <div style={{ width: 200 }}>\n            <Button href={apkLink} block variant=\"outline-dark\">\n              Download APK\n              <br /> for Android\n            </Button>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <QRCode value={appStoreLink} size={200} />\n        </Col>\n        <Col>\n          <QRCode value={playStoreLink} size={200} />\n        </Col>\n        <Col>\n          <QRCode value={apkLink} size={200} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default DownloadApp\n","import { useState } from \"react\"\nimport { gql, useSubscription } from \"@apollo/client\"\nimport Card from \"react-bootstrap/Card\"\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\nimport Tooltip from \"react-bootstrap/Tooltip\"\nimport { QRCode } from \"react-qrcode-logo\"\nimport copy from \"copy-to-clipboard\"\nimport Lottie from \"react-lottie\"\n\nimport animationData from \"./successAnimation.json\"\n\ntype OperationError = {\n  message: string\n}\n\nconst LN_INVOICE_PAYMENT_STATUS = gql`\n  subscription lnInvoicePaymentStatus($input: LnInvoicePaymentStatusInput!) {\n    mutationData: lnInvoicePaymentStatus(input: $input) {\n      errors {\n        message\n      }\n      status\n    }\n  }\n`\n\nexport default function Invoice({ paymentRequest }: { paymentRequest: string }) {\n  const [showCopied, setShowCopied] = useState(false)\n\n  const { loading, error, data } = useSubscription<{\n    mutationData: {\n      errors: OperationError[]\n      status?: string\n    }\n  }>(LN_INVOICE_PAYMENT_STATUS, {\n    variables: {\n      input: {\n        paymentRequest,\n      },\n    },\n  })\n\n  const copyInvoice = () => {\n    copy(paymentRequest)\n    setShowCopied(true)\n    setTimeout(() => {\n      setShowCopied(false)\n    }, 3000)\n  }\n\n  if (error) {\n    console.error(error)\n    return <div className=\"error\">{error.message}</div>\n  }\n\n  if (loading) {\n    return (\n      <Card.Body className=\"qr-code-container\">\n        <small>Scan using a Lightning-supported wallet</small>\n\n        <OverlayTrigger\n          show={showCopied}\n          placement=\"top\"\n          overlay={<Tooltip id=\"copy\">Copied!</Tooltip>}\n        >\n          <div onClick={copyInvoice}>\n            <QRCode\n              value={`${paymentRequest}`}\n              size={320}\n              logoImage={process.env.PUBLIC_URL + \"/BBQRLogo.png\"}\n              logoWidth={100}\n            />\n          </div>\n        </OverlayTrigger>\n        <p>Click on the QR code to copy</p>\n        <p>Waiting for payment confirmation...</p>\n      </Card.Body>\n    )\n  }\n\n  if (data) {\n    const { errors, status } = data.mutationData\n    if (errors.length > 0) {\n      console.error(errors)\n      return <div className=\"error\">{errors[0].message}</div>\n    }\n    if (status === \"PAID\") {\n      return (\n        <div>\n          <Lottie\n            options={{ animationData: animationData, loop: false }}\n            height=\"150\"\n            width=\"150\"\n          ></Lottie>\n        </div>\n      )\n    }\n  }\n\n  return <div className=\"error\">Something went wrong</div>\n}\n","import { gql, useMutation } from \"@apollo/client\"\nimport * as React from \"react\"\n\nimport Invoice from \"./invoice\"\n\ntype OperationError = {\n  message: string\n}\n\ntype LnInvoiceObject = {\n  paymentRequest: string\n}\n\nconst LN_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT = gql`\n  mutation lnInvoiceCreateOnBehalfOfRecipient($walletId: WalletId!, $amount: SatAmount!) {\n    mutationData: lnInvoiceCreateOnBehalfOfRecipient(\n      input: { recipientWalletId: $walletId, amount: $amount }\n    ) {\n      errors {\n        message\n      }\n      invoice {\n        paymentRequest\n      }\n    }\n  }\n`\n\nconst INVOICE_STALE_CHECK_INTERVAL = 5 * 60 * 1000\nconst INVOICE_EXPIRE_INTERVAL = 60 * 60 * 1000\n\nfunction GenerateInvoice({\n  amountInSats,\n  userWalletId,\n  regenerateAction,\n}: {\n  amountInSats: number\n  userWalletId: string\n  regenerateAction: () => void\n}) {\n  const [invoiceStatus, setInvoiceStatus] = React.useState<\n    \"loading\" | \"new\" | \"need-update\" | \"expired\"\n  >(\"loading\")\n  const [createInvoice, { loading, error, data }] = useMutation<{\n    mutationData: {\n      errors: OperationError[]\n      invoice?: LnInvoiceObject\n    }\n  }>(LN_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT, {\n    onError: console.error,\n    onCompleted: () => setInvoiceStatus(\"new\"),\n  })\n\n  React.useEffect(() => {\n    createInvoice({\n      variables: { walletId: userWalletId, amount: amountInSats },\n    })\n    const invoiceNeedUpdateTimer = setTimeout(\n      () => setInvoiceStatus(\"need-update\"),\n      INVOICE_STALE_CHECK_INTERVAL,\n    )\n    const invoiceExpiredTimer = setTimeout(\n      () => setInvoiceStatus(\"expired\"),\n      INVOICE_EXPIRE_INTERVAL,\n    )\n    return () => {\n      clearTimeout(invoiceNeedUpdateTimer)\n      clearTimeout(invoiceExpiredTimer)\n    }\n  }, [amountInSats, userWalletId, createInvoice])\n\n  if (error) {\n    return <div className=\"error\">{error.message}</div>\n  }\n\n  if (!data) {\n    return <div className=\"loading\">{loading && \"Creating Invoice\"}...</div>\n  }\n\n  const invoiceData = data.mutationData\n\n  if (invoiceData.errors?.length > 0) {\n    console.error(invoiceData.errors)\n    return (\n      <div className=\"error\">{invoiceData.errors.map((e) => e.message).join(\", \")}</div>\n    )\n  }\n\n  const { invoice } = invoiceData\n\n  if (invoice) {\n    return (\n      <>\n        {invoiceStatus === \"need-update\" && (\n          <div className=\"warning\">\n            Stale Price...{\" \"}\n            <span className=\"clickable\" onClick={regenerateAction}>\n              Regenerate Invoice\n            </span>\n          </div>\n        )}\n        {invoiceStatus === \"expired\" ? (\n          <div className=\"warning expired-invoice\">\n            Invoice Expired...{\" \"}\n            <span className=\"clickable\" onClick={regenerateAction}>\n              Generate New Invoice\n            </span>\n          </div>\n        ) : (\n          <Invoice paymentRequest={invoice.paymentRequest} />\n        )}\n      </>\n    )\n  }\n\n  return null\n}\n\nexport default React.memo(GenerateInvoice)\n","import { gql, useSubscription } from \"@apollo/client\"\nimport * as React from \"react\"\n\nconst QUERY_PRICE = gql`\n  subscription price(\n    $amount: SatAmount!\n    $amountCurrencyUnit: ExchangeCurrencyUnit!\n    $priceCurrencyUnit: ExchangeCurrencyUnit!\n  ) {\n    price(\n      input: {\n        amount: $amount\n        amountCurrencyUnit: $amountCurrencyUnit\n        priceCurrencyUnit: $priceCurrencyUnit\n      }\n    ) {\n      errors {\n        message\n      }\n      price {\n        base\n        offset\n        currencyUnit\n        formattedAmount\n      }\n    }\n  }\n`\n\nconst useSatPrice = () => {\n  const priceRef = React.useRef<number>(0)\n\n  const { data } = useSubscription(QUERY_PRICE, {\n    variables: {\n      amount: 1,\n      amountCurrencyUnit: \"BTCSAT\",\n      priceCurrencyUnit: \"USDCENT\",\n    },\n  })\n\n  const conversions = React.useMemo(\n    () => ({\n      satsToUsd: (sats: number) => (sats * priceRef.current) / 100,\n      usdToSats: (usd: number) => (100 * usd) / priceRef.current,\n    }),\n    [],\n  )\n\n  if (data?.price?.price) {\n    const { base, offset } = data.price.price\n    priceRef.current = base / 10 ** offset\n  }\n\n  if (priceRef.current === 0) {\n    return {\n      satsToUsd: () => NaN,\n      usdToSats: () => NaN,\n    }\n  }\n\n  return conversions\n}\n\nexport default useSatPrice\n","import * as React from \"react\"\n\nconst formatter = new Intl.NumberFormat(\"en-US\", {\n  maximumFractionDigits: 2,\n})\n\nconst parseInputValue = (inputValue: string) => {\n  // TODO: Consider other currency amount formats here\n  const numberValue = Number(inputValue.replace(/[^0-9.]/g, \"\"))\n  const inputValueIncomplete = inputValue.match(/(\\.[1-9]?0+|\\.)$/)\n  const formattedValue =\n    // Allaw fixing invalid input and typing the decimal part at the end\n    Number.isNaN(numberValue) || inputValueIncomplete\n      ? inputValue\n      : formatter.format(numberValue)\n  return {\n    numberValue,\n    formattedValue,\n  }\n}\n\nfunction FormattedInput({\n  value,\n  onValueChange,\n}: {\n  value: string\n  onValueChange: ({\n    numberValue,\n    formattedValue,\n  }: {\n    numberValue: number\n    formattedValue: string\n  }) => void\n}) {\n  const [input, setInput] = React.useState(parseInputValue(value))\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Block more than 2 decmial numbers or points in the input\n    if (e.target.value.match(/(\\.[0-9]{3,}$|\\..*\\.)/)) return\n\n    const parsedInputValue = parseInputValue(e.target.value)\n\n    setInput(parsedInputValue)\n    onValueChange(parsedInputValue)\n  }\n\n  return <input value={input.formattedValue} onChange={handleOnChange} />\n}\n\nexport default React.memo(FormattedInput)\n","import * as React from \"react\"\nimport debounce from \"lodash.debounce\"\n\nimport GenerateInvoice from \"./generate-invoice\"\nimport useSatPrice from \"../helpers/use-sat-price\"\nimport FormattedInput from \"./formatted-input\"\n\nconst usdFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n})\n\nconst satsFormatter = new Intl.NumberFormat(\"en-US\", {\n  maximumFractionDigits: 0,\n})\n\nconst parseQueryAmount = (queryObject: Record<string, string>) => {\n  return {\n    amount: Number(queryObject?.amount) || 0,\n    currency: queryObject?.currency?.toUpperCase() || \"USD\",\n  }\n}\n\nexport default function ReceiveAmount({\n  userWalletId,\n  updateURLAmount,\n}: {\n  userWalletId: string\n  updateURLAmount: ({ amount, currency }: { amount: number; currency: string }) => void\n}) {\n  const { satsToUsd, usdToSats } = useSatPrice()\n  const [satsForInvoice, setSatsForInvoice] = React.useState(0)\n\n  const urlSearchParams = new URLSearchParams(window.location.search)\n  const params = Object.fromEntries(urlSearchParams.entries())\n  const { amount, currency } = parseQueryAmount(params) // USD or SATs\n\n  const [primaryAmount, setPrimaryAmount] = React.useState({\n    amount,\n    currency,\n  })\n\n  const { amount: primaryValue, currency: primaryCurrency } = primaryAmount\n\n  const convertValue = React.useCallback(\n    (value: number): string => {\n      const newValue = primaryCurrency === \"SATS\" ? satsToUsd(value) : usdToSats(value)\n      if (Number.isNaN(newValue)) {\n        return \"??\" // Not parsable\n      }\n      return primaryCurrency === \"SATS\"\n        ? usdFormatter.format(newValue)\n        : satsFormatter.format(newValue) + \" sats\"\n    },\n    [primaryCurrency, satsToUsd, usdToSats],\n  )\n\n  const [convertedValue, setConvertedValue] = React.useState(() =>\n    convertValue(primaryValue),\n  )\n\n  React.useEffect(() => {\n    setConvertedValue(convertValue(primaryValue))\n  }, [convertValue, primaryValue])\n\n  const onAmountUpdateDebounced = React.useMemo(\n    () =>\n      debounce(({ satsForInvoice, amount, currency }) => {\n        if (satsForInvoice > 0) {\n          updateURLAmount({ amount, currency })\n        }\n        setSatsForInvoice(satsForInvoice)\n      }, 1000),\n    [updateURLAmount],\n  )\n\n  React.useEffect(() => {\n    onAmountUpdateDebounced({\n      satsForInvoice:\n        primaryCurrency === \"SATS\" ? primaryValue : Math.round(usdToSats(primaryValue)),\n      amount: primaryValue,\n      currency: primaryCurrency,\n    })\n  }, [onAmountUpdateDebounced, primaryCurrency, primaryValue, usdToSats])\n\n  const onFormattedInputValueChange: ({\n    numberValue,\n    formattedValue,\n  }: {\n    numberValue: number\n    formattedValue: string\n  }) => void = React.useCallback(({ numberValue }) => {\n    setPrimaryAmount((currentAmount) => {\n      return {\n        amount: numberValue,\n        currency: currentAmount.currency,\n      }\n    })\n  }, [])\n\n  const updateSatsAmount = React.useCallback(() => {\n    setSatsForInvoice(\n      primaryCurrency === \"SATS\" ? primaryValue : Math.round(usdToSats(primaryValue)),\n    )\n    setConvertedValue(convertValue(primaryValue))\n  }, [convertValue, primaryCurrency, primaryValue, usdToSats])\n\n  const toggleCurrency = () => {\n    setPrimaryAmount((currentAmount) => {\n      const newPrimaryNumber: number =\n        currentAmount.currency === \"SATS\"\n          ? satsToUsd(currentAmount.amount)\n          : usdToSats(currentAmount.amount)\n      return {\n        amount: Number(\n          newPrimaryNumber.toFixed(currentAmount.currency === \"SATS\" ? 2 : 0),\n        ),\n        currency: currentAmount.currency === \"SATS\" ? \"USD\" : \"SATS\",\n      }\n    })\n  }\n\n  return (\n    <>\n      <div className=\"amount-input\">\n        <div className=\"currency-label\">{primaryCurrency === \"SATS\" ? \"sats\" : \"$\"}</div>\n        <div className=\"input-container\">\n          <FormattedInput\n            key={primaryCurrency}\n            value={primaryValue.toString()}\n            onValueChange={onFormattedInputValueChange}\n          />\n        </div>\n        <div className=\"toggle-currency\" onClick={toggleCurrency}>\n          &#8645;\n        </div>\n      </div>\n      <div>&#8776; {convertedValue}</div>\n\n      {satsForInvoice > 0 && (\n        <GenerateInvoice\n          amountInSats={satsForInvoice}\n          userWalletId={userWalletId}\n          regenerateAction={updateSatsAmount}\n        />\n      )}\n    </>\n  )\n}\n","import { useEffect } from \"react\"\nimport { gql, useMutation } from \"@apollo/client\"\n\nimport Invoice from \"./invoice\"\n\ntype OperationError = {\n  message: string\n}\n\ntype LnInvoiceObject = {\n  paymentRequest: string\n}\n\nconst LN_NOAMOUNT_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT = gql`\n  mutation lnNoAmountInvoiceCreateOnBehalfOfRecipient($walletId: WalletId!) {\n    mutationData: lnNoAmountInvoiceCreateOnBehalfOfRecipient(\n      input: { recipientWalletId: $walletId }\n    ) {\n      errors {\n        message\n      }\n      invoice {\n        paymentRequest\n      }\n    }\n  }\n`\n\nexport default function ReceiveNoAmount({\n  userWalletId,\n  onSetAmountClick,\n}: {\n  userWalletId: string\n  onSetAmountClick: () => void\n}) {\n  const [createInvoice, { loading, error, data }] = useMutation<{\n    mutationData: {\n      errors: OperationError[]\n      invoice?: LnInvoiceObject\n    }\n  }>(LN_NOAMOUNT_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT, { onError: console.error })\n\n  useEffect(() => {\n    createInvoice({\n      variables: { walletId: userWalletId },\n    })\n  }, [createInvoice, userWalletId])\n\n  if (error) {\n    return <div className=\"error\">{error.message}</div>\n  }\n\n  let invoice\n\n  if (data) {\n    const invoiceData = data.mutationData\n\n    if (invoiceData.errors?.length > 0) {\n      return <div className=\"error\">{invoiceData.errors[0].message}</div>\n    }\n\n    invoice = invoiceData.invoice\n  }\n\n  return (\n    <>\n      {loading && <div className=\"loading\">Loading...</div>}\n\n      <button className=\"set-invoice-button\" onClick={onSetAmountClick}>\n        Set Invoice Amount\n      </button>\n\n      {invoice && <Invoice paymentRequest={invoice.paymentRequest} />}\n    </>\n  )\n}\n","const updateHistoryState = (inObj: Record<string, string | number>) => {\n  if (!(inObj instanceof Object)) {\n    throw new Error(\"Object required\")\n  }\n  const qs = \"?\" + objectToQueryString(inObj)\n  if (qs === location.search) {\n    return\n  }\n  history.replaceState(null, \"\", location.pathname + (qs !== \"?\" ? qs : \"\"))\n}\n\nexport const objectToQueryString = (inObj: Record<string, string | number>) => {\n  const qs = new URLSearchParams()\n  Object.entries(inObj).forEach(([key, value]) =>\n    value !== undefined ? qs.append(key, value.toString()) : null,\n  )\n  return qs.toString()\n}\n\nexport default updateHistoryState\n","import Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport Container from \"react-bootstrap/Container\"\nimport { useQueryParams } from \"hookrouter\"\nimport Image from \"react-bootstrap/Image\"\n\nimport { getOS, appStoreLink, playStoreLink } from \"./downloadApp\"\nimport ReceiveAmount from \"./receiveAmount\"\nimport ReceiveNoAmount from \"./receiveNoAmount\"\nimport { gql, useQuery } from \"@apollo/client\"\nimport updateHistoryState from \"../helpers/update-history-state\"\n\nconst USER_WALLET_ID = gql`\n  query userDefaultWalletId($username: Username!) {\n    userDefaultWalletId(username: $username)\n  }\n`\n\nexport default function Receive({ username }: { username: string }) {\n  const [queryParams, setQueryParams] = useQueryParams()\n\n  const { error, loading, data } = useQuery(USER_WALLET_ID, {\n    variables: {\n      username,\n    },\n  })\n\n  const os = getOS()\n\n  if (error) return <div className=\"error\">{error.message}</div>\n  if (loading) return <div className=\"loading\">Loading...</div>\n  if (!data) return null\n\n  const { userDefaultWalletId } = data\n\n  const isAmountInvoice = queryParams?.amount !== undefined\n\n  const onSetAmountClick = () => {\n    setQueryParams({\n      amount: 0,\n      currency: \"USD\",\n    })\n  }\n\n  return (\n    <Container className=\"invoice-container\" fluid>\n      {os === undefined && <br />}\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\" style={{ padding: 0 }}>\n          <Card className=\"text-center\">\n            <Card.Header>Pay {username}</Card.Header>\n\n            {isAmountInvoice ? (\n              <ReceiveAmount\n                userWalletId={userDefaultWalletId}\n                updateURLAmount={updateHistoryState}\n              />\n            ) : (\n              <ReceiveNoAmount\n                userWalletId={userDefaultWalletId}\n                onSetAmountClick={onSetAmountClick}\n              />\n            )}\n\n            <Card.Body>\n              {os === \"android\" && (\n                <a href={playStoreLink}>\n                  <Image\n                    src={process.env.PUBLIC_URL + \"/google-play-badge.png\"}\n                    height=\"40px\"\n                    rounded\n                  />\n                </a>\n              )}\n              {os === \"ios\" && (\n                <a href={playStoreLink}>\n                  <Image\n                    src={process.env.PUBLIC_URL + \"/apple-app-store.png\"}\n                    height=\"40px\"\n                    rounded\n                  />\n                </a>\n              )}\n              {os === undefined && (\n                <div>\n                  <a href={appStoreLink}>\n                    <Image\n                      src={process.env.PUBLIC_URL + \"/apple-app-store.png\"}\n                      height=\"45px\"\n                      rounded\n                    />\n                  </a>\n                  &nbsp;\n                  <a href={playStoreLink}>\n                    <Image\n                      src={process.env.PUBLIC_URL + \"/google-play-badge.png\"}\n                      height=\"45px\"\n                      rounded\n                    />\n                  </a>\n                </div>\n              )}\n            </Card.Body>\n            <Card.Footer className=\"text-muted\">\n              Powered by <Card.Link href=\"https://galoy.io\">Galoy </Card.Link>\n              <br />\n              <Card.Link href={window.location.origin}>Open a channel with us</Card.Link>\n            </Card.Footer>\n          </Card>\n        </Col>\n      </Row>\n      <br />\n    </Container>\n  )\n}\n","import { forwardRef, useRef } from \"react\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport Container from \"react-bootstrap/Container\"\nimport Button from \"react-bootstrap/Button\"\nimport ReactToPrint from \"react-to-print\"\nimport { QRCode } from \"react-qrcode-logo\"\n\nconst QRContainer = forwardRef((props: { username: string }, ref) => {\n  return (\n    <div style={{ display: \"none\" }}>\n      {/* @ts-expect-error: TODO */}\n      <Container fluid ref={ref}>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <Card className=\"text-center\">\n              <Card.Body>\n                <Card.Text>\n                  <h1>Pay {props.username}</h1>\n                  <QRCode\n                    ecLevel=\"H\"\n                    value={`https://ln.bitcoinbeach.com/${props.username}`}\n                    size={800}\n                    logoImage={process.env.PUBLIC_URL + \"/BBQRLogo.png\"}\n                    logoWidth={250}\n                  />\n                </Card.Text>\n              </Card.Body>\n              <h2>Powered by Galoy.io</h2>\n            </Card>\n          </Col>\n        </Row>\n        <br />\n      </Container>\n    </div>\n  )\n})\n\nconst PrintQR = ({ username }: { username: string }) => {\n  const componentRef = useRef()\n\n  return (\n    <>\n      <QRContainer username={username} ref={componentRef} />\n      <Container fluid>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <Card className=\"text-center\">\n              <Card.Body>\n                <Card.Text>\n                  <h3>Pay {username}</h3>\n                  <QRCode\n                    ecLevel=\"H\"\n                    value={`https://ln.bitcoinbeach.com/${username}`}\n                    size={300}\n                    logoImage={process.env.PUBLIC_URL + \"/BBQRLogo.png\"}\n                    logoWidth={100}\n                  />\n                </Card.Text>\n              </Card.Body>\n              <h4>\n                Powered by <Card.Link href=\"https://galoy.io\">Galoy.io</Card.Link>\n              </h4>\n            </Card>\n          </Col>\n        </Row>\n        <br />\n      </Container>\n      <Row className=\"justify-content-md-center\">\n        <ReactToPrint\n          trigger={() => <Button>Print QR Code</Button>}\n          // @ts-expect-error: TODO\n          content={() => componentRef.current}\n          onBeforeGetContent={() => {\n            const qrcodeLogo = document.getElementById(\"react-qrcode-logo\")\n            if (qrcodeLogo) {\n              qrcodeLogo.style.height = \"1000px\"\n              qrcodeLogo.style.width = \"1000px\"\n            }\n          }}\n        />\n      </Row>\n    </>\n  )\n}\n\nexport default PrintQR\n","import Navbar from \"react-bootstrap/Navbar\"\nimport Container from \"react-bootstrap/Container\"\nimport Image from \"react-bootstrap/Image\"\n\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\">\n      <Container>\n        <Navbar.Brand href=\"https://bitcoinbeach.com\">\n          <Image src={process.env.PUBLIC_URL + \"/BBLogo.png\"} rounded />{\" \"}\n        </Navbar.Brand>\n      </Container>\n    </Navbar>\n  )\n}\n\nexport default Header\n","import \"bootstrap/dist/css/bootstrap.min.css\"\nimport Home from \"./components/home\"\nimport Receive from \"./components/receive\"\nimport PrintQR from \"./components/printQR\"\nimport DownloadApp from \"./components/downloadApp\"\nimport { useRoutes } from \"hookrouter\"\nimport Header from \"./components/header\"\n\nconst routes = {\n  \"/\": () => <Home />,\n  \"/download\": () => <DownloadApp />,\n  \"/:username/print\": ({ username }: { username: string }) => (\n    <PrintQR username={username} />\n  ),\n  \"/:username\": ({ username }: { username: string }) => <Receive username={username} />,\n}\n\nfunction App() {\n  // @ts-expect-error: TODO\n  const routeResult = useRoutes(routes)\n\n  return (\n    <div>\n      <Header />\n      {routeResult || <Home />}\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from \"react-dom\"\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  split,\n  HttpLink,\n} from \"@apollo/client\"\nimport { WebSocketLink } from \"@apollo/client/link/ws\"\nimport { getMainDefinition } from \"@apollo/client/utilities\"\n\nimport \"./index.css\"\nimport App from \"./App\"\n\nimport { GRAPHQL_URI, GRAPHQL_SUBSCRIPTION_URI } from \"./config\"\n\nconst httpLink = new HttpLink({\n  uri: GRAPHQL_URI,\n})\n\nconst wsLink = new WebSocketLink({\n  uri: GRAPHQL_SUBSCRIPTION_URI,\n  options: {\n    reconnect: true,\n  },\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\"\n    )\n  },\n  wsLink,\n  httpLink,\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n)\n"],"sourceRoot":""}