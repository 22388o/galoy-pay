{"version":3,"sources":["config.ts","components/home.tsx","components/downloadApp.tsx","components/invoice.tsx","components/receive.tsx","components/printQR.tsx","components/header.tsx","App.tsx","index.tsx"],"names":["GRAPHQL_URI","process","GRAPHQL_SUBSCRIPTION_URI","GET_NODE_STATS","gql","Home","nodeUrl","indexOf","useQuery","loading","error","data","Container","Row","Col","Jumbotron","Card","Body","ListGroup","variant","Item","style","fontSize","overflowWrap","globals","nodesIds","href","getOS","userAgent","navigator","vendor","window","opera","test","MSStream","playStoreLink","appStoreLink","apkLink","DownloadApp","os","location","replace","Image","src","rounded","width","Button","block","value","size","LN_INVOICE_PAYMENT_STATUS","Invoice","paymentRequest","useState","showCopied","setShowCopied","useSubscription","variables","input","console","className","message","paddingBottom","paddingTop","OverlayTrigger","show","placement","overlay","Tooltip","id","onClick","copy","setTimeout","logoImage","logoWidth","mutationData","errors","status","length","options","animationData","loop","height","log","LN_NOAMOUNT_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT","uiErrorMessage","errorMessage","Receive","invoice","username","useMutation","createInvoice","useEffect","walletName","invoiceData","fluid","undefined","md","padding","Header","Footer","Link","origin","QRContainer","forwardRef","props","ref","display","Text","ecLevel","PrintQR","componentRef","useRef","trigger","content","current","onBeforeGetContent","qrcodeLogo","document","getElementById","Navbar","bg","Brand","routes","App","routeResult","useRoutes","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","ApolloProvider"],"mappings":"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","file":"static/js/main.9bb54455.chunk.js","sourcesContent":["export const GRAPHQL_URI = process.env.GRAPHQL_URI as string\n\nexport const GRAPHQL_SUBSCRIPTION_URI = process.env.GRAPHQL_SUBSCRIPTION_URI as string\n\nif (!GRAPHQL_URI || !GRAPHQL_SUBSCRIPTION_URI) {\n  throw new Error(\"Missing env variables\")\n}\n","import Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\nimport { gql, useQuery } from \"@apollo/client\"\n\nimport { GRAPHQL_URI } from \"../config\"\n\nconst GET_NODE_STATS = gql`\n  query nodeIds {\n    globals {\n      nodesIds\n    }\n  }\n`\n\nfunction Home() {\n  const nodeUrl =\n    GRAPHQL_URI.indexOf(\"testnet\") === -1\n      ? `https://1ml.com/node/`\n      : `https://1ml.com/testnet/node/`\n\n  const { loading, error, data } = useQuery(GET_NODE_STATS)\n\n  return (\n    <Container>\n      <br />\n      <Row>\n        <Col>\n          <h2>Connect to the Bitcoin Beach Lightning Node</h2>\n          <br />\n          <Jumbotron>\n            <Container>\n              <Row>\n                <Col>\n                  <Card>\n                    <Card.Body>\n                      <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                          <label>Node Public Key: </label>{\" \"}\n                          <p style={{ fontSize: \"small\", overflowWrap: \"break-word\" }}>\n                            {error\n                              ? \"Unavailable\"\n                              : loading\n                              ? \"Loading...\"\n                              : data.globals.nodesIds[0]}\n                          </p>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                          {error ? (\n                            \"Unavailable\"\n                          ) : loading ? (\n                            \"Loading...\"\n                          ) : (\n                            <a href={nodeUrl + `${data.globals.nodesIds[0]}`}>\n                              Connect the Bitcoin Beach Lightning node\n                            </a>\n                          )}\n                        </ListGroup.Item>\n                      </ListGroup>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              </Row>\n              <hr />\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Home\n","import { QRCode } from \"react-qrcode-logo\"\nimport Image from \"react-bootstrap/Image\"\nimport Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Button from \"react-bootstrap/Button\"\n\nexport const getOS = () => {\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera\n\n  // Windows Phone must come first because its UA also contains \"Android\"\n  if (/windows phone/i.test(userAgent)) {\n    return undefined\n  }\n\n  if (/android/i.test(userAgent)) {\n    return \"android\"\n  }\n\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\n  if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n    return \"ios\"\n  }\n\n  return undefined\n}\n\nexport const playStoreLink = \"https://play.google.com/store/apps/details?id=com.galoyapp\"\nexport const appStoreLink = \"https://apps.apple.com/app/bitcoin-beach-wallet/id1531383905\"\nexport const apkLink = \"https://storage.googleapis.com/bitcoin-beach-wallet/latest.apk\"\n\nconst DownloadApp = () => {\n  const os = getOS()\n\n  if (os === \"android\") {\n    window.location.replace(\"https://play.google.com/store/apps/details?id=com.galoyapp\")\n  } else if (os === \"ios\") {\n    window.location.replace(\n      \"itms-apps://itunes.apple.com/app/bitcoin-beach-wallet/id1531383905\",\n    )\n  }\n\n  return (\n    <Container>\n      <br />\n      <h3>Download the Bitcoin Beach Wallet</h3>\n      <br />\n      <Row>\n        <Col>\n          <a href={appStoreLink}>\n            <Image src={process.env.PUBLIC_URL + \"/apple-app-store.png\"} rounded />\n          </a>\n          <br />\n          <br />\n        </Col>\n        <Col>\n          <a href={playStoreLink}>\n            <Image src={process.env.PUBLIC_URL + \"/google-play-badge.png\"} rounded />\n          </a>\n        </Col>\n        <Col>\n          <div style={{ width: 200 }}>\n            <Button href={apkLink} block variant=\"outline-dark\">\n              Download APK\n              <br /> for Android\n            </Button>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <QRCode value={appStoreLink} size={200} />\n        </Col>\n        <Col>\n          <QRCode value={playStoreLink} size={200} />\n        </Col>\n        <Col>\n          <QRCode value={apkLink} size={200} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default DownloadApp\n","import { useState } from \"react\"\nimport { gql, useSubscription } from \"@apollo/client\"\nimport Card from \"react-bootstrap/Card\"\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\nimport Tooltip from \"react-bootstrap/Tooltip\"\nimport { QRCode } from \"react-qrcode-logo\"\nimport copy from \"copy-to-clipboard\"\nimport Lottie from \"react-lottie\"\n\nimport animationData from \"./successAnimation.json\"\n\ntype OperationError = {\n  message: string\n}\n\nconst LN_INVOICE_PAYMENT_STATUS = gql`\n  subscription lnInvoicePaymentStatus($input: LnInvoicePaymentStatusInput!) {\n    mutationData: lnInvoicePaymentStatus(input: $input) {\n      errors {\n        message\n      }\n      status\n    }\n  }\n`\n\nexport default function Invoice({ paymentRequest }: { paymentRequest: string }) {\n  const [showCopied, setShowCopied] = useState(false)\n\n  const { loading, error, data } = useSubscription<{\n    mutationData: {\n      errors: OperationError[]\n      status?: string\n    }\n  }>(LN_INVOICE_PAYMENT_STATUS, {\n    variables: {\n      input: {\n        paymentRequest,\n      },\n    },\n  })\n\n  const copyInvoice = () => {\n    copy(paymentRequest)\n    setShowCopied(true)\n    setTimeout(() => {\n      setShowCopied(false)\n    }, 3000)\n  }\n\n  if (error) {\n    console.error(error)\n    return <div className=\"error\">{error.message}</div>\n  }\n\n  if (loading) {\n    return (\n      <Card.Body style={{ paddingBottom: \"0\", paddingTop: \"5px\" }}>\n        <small>Scan using a lightning enabled wallet</small>\n\n        <OverlayTrigger\n          show={showCopied}\n          placement=\"top\"\n          overlay={<Tooltip id=\"copy\">Copied!</Tooltip>}\n        >\n          <div onClick={copyInvoice}>\n            <QRCode\n              value={`${paymentRequest}`}\n              size={320}\n              logoImage={process.env.PUBLIC_URL + \"/BBQRLogo.png\"}\n              logoWidth={100}\n            />\n          </div>\n        </OverlayTrigger>\n        <p>Click on the QR code to copy</p>\n        <p>Waiting for payment confirmation...</p>\n      </Card.Body>\n    )\n  }\n\n  if (data) {\n    const { errors, status } = data.mutationData\n    if (errors.length > 0) {\n      console.error(errors)\n      return <div className=\"error\">{errors[0].message}</div>\n    }\n    if (status === \"PAID\") {\n      return (\n        <div>\n          <Lottie\n            options={{ animationData: animationData, loop: false }}\n            height=\"150\"\n            width=\"150\"\n          ></Lottie>\n        </div>\n      )\n    }\n  }\n\n  console.log({ data, loading, error })\n  return <div className=\"error\">Something went wrong</div>\n}\n","import { useEffect } from \"react\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport Container from \"react-bootstrap/Container\"\nimport Image from \"react-bootstrap/Image\"\nimport { gql, useMutation } from \"@apollo/client\"\n\nimport { getOS, appStoreLink, playStoreLink } from \"./downloadApp\"\nimport Invoice from \"./invoice\"\n\ntype OperationError = {\n  message: string\n}\n\ntype LnInvoiceObject = {\n  paymentRequest: string\n}\n\nconst LN_NOAMOUNT_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT = gql`\n  mutation lnNoAmountInvoiceCreateOnBehalfOfRecipient($walletName: WalletName!) {\n    mutationData: lnNoAmountInvoiceCreateOnBehalfOfRecipient(\n      input: { recipient: $walletName }\n    ) {\n      errors {\n        message\n      }\n      invoice {\n        paymentRequest\n      }\n    }\n  }\n`\n\nfunction uiErrorMessage(errorMessage: string) {\n  switch (errorMessage) {\n    case \"CouldNotFindError\":\n      return \"User not found\"\n    default:\n      console.error(errorMessage)\n      return \"Something went wrong\"\n  }\n}\n\nexport default function Receive({ username }: { username: string }) {\n  const [createInvoice, { loading, error, data }] = useMutation<{\n    mutationData: {\n      errors: OperationError[]\n      invoice?: LnInvoiceObject\n    }\n  }>(LN_NOAMOUNT_INVOICE_CREATE_ON_BEHALF_OF_RECIPIENT)\n\n  useEffect(() => {\n    createInvoice({\n      variables: { walletName: username },\n    })\n  }, [createInvoice, username])\n\n  if (error) {\n    console.error(error)\n  }\n\n  let errorMessage, invoice\n\n  if (data) {\n    const invoiceData = data.mutationData\n\n    if (invoiceData.errors?.length > 0) {\n      errorMessage = invoiceData.errors[0].message\n    }\n\n    invoice = invoiceData.invoice\n  }\n\n  const os = getOS()\n\n  return (\n    <Container fluid>\n      {os === undefined && <br />}\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\" style={{ padding: 0 }}>\n          <Card className=\"text-center\">\n            <Card.Header>Pay {username}</Card.Header>\n\n            {errorMessage && <div className=\"error\">{uiErrorMessage(errorMessage)}</div>}\n\n            {loading && !error && (\n              <div>\n                {\" \"}\n                <br />\n                Loading...\n              </div>\n            )}\n\n            {invoice && <Invoice paymentRequest={invoice.paymentRequest} />}\n\n            <Card.Body>\n              {os === \"android\" && (\n                <a href={playStoreLink}>\n                  <Image\n                    src={process.env.PUBLIC_URL + \"/google-play-badge.png\"}\n                    height=\"40px\"\n                    rounded\n                  />\n                </a>\n              )}\n              {os === \"ios\" && (\n                <a href={playStoreLink}>\n                  <Image\n                    src={process.env.PUBLIC_URL + \"/apple-app-store.png\"}\n                    height=\"40px\"\n                    rounded\n                  />\n                </a>\n              )}\n              {os === undefined && (\n                <div>\n                  <a href={appStoreLink}>\n                    <Image\n                      src={process.env.PUBLIC_URL + \"/apple-app-store.png\"}\n                      height=\"45px\"\n                      rounded\n                    />\n                  </a>\n                  &nbsp;\n                  <a href={playStoreLink}>\n                    <Image\n                      src={process.env.PUBLIC_URL + \"/google-play-badge.png\"}\n                      height=\"45px\"\n                      rounded\n                    />\n                  </a>\n                </div>\n              )}\n            </Card.Body>\n            <Card.Footer className=\"text-muted\">\n              Powered by <Card.Link href=\"https://galoy.io\">Galoy </Card.Link>\n              <br />\n              <Card.Link href={window.location.origin}>Open a channel with us</Card.Link>\n            </Card.Footer>\n          </Card>\n        </Col>\n      </Row>\n      <br />\n    </Container>\n  )\n}\n","import { forwardRef, useRef } from \"react\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport Container from \"react-bootstrap/Container\"\nimport Button from \"react-bootstrap/Button\"\nimport ReactToPrint from \"react-to-print\"\nimport { QRCode } from \"react-qrcode-logo\"\n\nconst QRContainer = forwardRef((props: { username: string }, ref) => {\n  return (\n    <div style={{ display: \"none\" }}>\n      {/* @ts-expect-error: TODO */}\n      <Container fluid ref={ref}>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <Card className=\"text-center\">\n              <Card.Body>\n                <Card.Text>\n                  <h1>Pay {props.username}</h1>\n                  <QRCode\n                    ecLevel=\"H\"\n                    value={`https://ln.bitcoinbeach.com/${props.username}`}\n                    size={800}\n                    logoImage={process.env.PUBLIC_URL + \"/BBQRLogo.png\"}\n                    logoWidth={250}\n                  />\n                </Card.Text>\n              </Card.Body>\n              <h2>Powered by Galoy.io</h2>\n            </Card>\n          </Col>\n        </Row>\n        <br />\n      </Container>\n    </div>\n  )\n})\n\nconst PrintQR = ({ username }: { username: string }) => {\n  const componentRef = useRef()\n\n  return (\n    <>\n      <QRContainer username={username} ref={componentRef} />\n      <Container fluid>\n        <br />\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <Card className=\"text-center\">\n              <Card.Body>\n                <Card.Text>\n                  <h3>Pay {username}</h3>\n                  <QRCode\n                    ecLevel=\"H\"\n                    value={`https://ln.bitcoinbeach.com/${username}`}\n                    size={300}\n                    logoImage={process.env.PUBLIC_URL + \"/BBQRLogo.png\"}\n                    logoWidth={100}\n                  />\n                </Card.Text>\n              </Card.Body>\n              <h4>\n                Powered by <Card.Link href=\"https://galoy.io\">Galoy.io</Card.Link>\n              </h4>\n            </Card>\n          </Col>\n        </Row>\n        <br />\n      </Container>\n      <Row className=\"justify-content-md-center\">\n        <ReactToPrint\n          trigger={() => <Button>Print QR Code</Button>}\n          // @ts-expect-error: TODO\n          content={() => componentRef.current}\n          onBeforeGetContent={() => {\n            const qrcodeLogo = document.getElementById(\"react-qrcode-logo\")\n            if (qrcodeLogo) {\n              qrcodeLogo.style.height = \"1000px\"\n              qrcodeLogo.style.width = \"1000px\"\n            }\n          }}\n        />\n      </Row>\n    </>\n  )\n}\n\nexport default PrintQR\n","import Navbar from \"react-bootstrap/Navbar\"\nimport Container from \"react-bootstrap/Container\"\nimport Image from \"react-bootstrap/Image\"\n\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\">\n      <Container>\n        <Navbar.Brand href=\"https://bitcoinbeach.com\">\n          <Image src={process.env.PUBLIC_URL + \"/BBLogo.png\"} rounded />{\" \"}\n        </Navbar.Brand>\n      </Container>\n    </Navbar>\n  )\n}\n\nexport default Header\n","import \"bootstrap/dist/css/bootstrap.min.css\"\nimport Home from \"./components/home\"\nimport Receive from \"./components/receive\"\nimport PrintQR from \"./components/printQR\"\nimport DownloadApp from \"./components/downloadApp\"\nimport { useRoutes } from \"hookrouter\"\nimport Header from \"./components/header\"\n\nconst routes = {\n  \"/\": () => <Home />,\n  \"/download\": () => <DownloadApp />,\n  \"/:username/print\": ({ username }: { username: string }) => (\n    <PrintQR username={username} />\n  ),\n  \"/:username\": ({ username }: { username: string }) => <Receive username={username} />,\n}\n\nfunction App() {\n  // @ts-expect-error: TODO\n  const routeResult = useRoutes(routes)\n\n  return (\n    <div>\n      <Header />\n      {routeResult || <Home />}\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from \"react-dom\"\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  split,\n  HttpLink,\n} from \"@apollo/client\"\nimport { WebSocketLink } from \"@apollo/client/link/ws\"\nimport { getMainDefinition } from \"@apollo/client/utilities\"\n\nimport \"./index.css\"\nimport App from \"./App\"\n\nimport { GRAPHQL_URI, GRAPHQL_SUBSCRIPTION_URI } from \"./config\"\n\nconst httpLink = new HttpLink({\n  uri: GRAPHQL_URI,\n})\n\nconst wsLink = new WebSocketLink({\n  uri: GRAPHQL_SUBSCRIPTION_URI,\n  options: {\n    reconnect: true,\n  },\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\"\n    )\n  },\n  wsLink,\n  httpLink,\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n)\n"],"sourceRoot":""}